View(SKAT.linear.Linear)
View(SKAT.linear.Linear)
r.corr = out.method$r.corr
out.method <- SKAT_Check_Method(method, r.corr)
method = out.method$method
r.corr = out.method$r.corr
length(r.corr)
View(KMTest.linear.Linear)
View(KMTest.linear.Linear)
weights = NULL
Z = t(t(Z) * (weights))
Z
r.corr
res
t(res)%*%Z
SKAT_MAIN_Check_Z(
Z,
n,
obj.res$id_include,
SetID,
weights,
weights.beta,
impute.method,
is_check_genotype,
is_dosage,
missing_cutoff
)
re = SKAT.linear.Linear(
obj.res$res,
out.z$Z.test
,
obj.res$X1,
kernel,
out.z$weights,
obj.res$s2,
method
,
obj.res$res.out,
obj.res$n.Resampling,
r.corr = r.corr
)
obj.res$res
?SKAT
obj<-SKAT_Null_Model(y.c ~ 1, out_type="C")
re <-
SKAT_With_NullModel(
Z,
obj,
kernel = kernel,
method = method,
weights.beta = weights.beta,
weights = weights,
impute.method = impute.method,
r.corr = r.corr,
is_check_genotype = is_check_genotype,
is_dosage = is_dosage,
missing_cutoff = missing_cutoff
)
Z
data(SKAT.example)
attach(SKAT.example)
Z
clear all()
library(SKAT)
setwd("~/GitHub/SKAT/SKATr/")
functionFiles <- list.files()
for (functionN in 1:length(functionFiles)){
source(functionFiles[functionN])
}
rm(functionFiles)
rm(functionN)
data(SKAT.example)
attach(SKAT.example)
obj<-SKAT_Null_Model(y.c ~ 1, out_type="C")
SKAT(Z, obj)$p.value
library(SKAT)
setwd("~/GitHub/SKAT/SKATr/")
functionFiles <- list.files()
for (functionN in 1:length(functionFiles)){
source(functionFiles[functionN])
}
rm(functionFiles)
rm(functionN)
data(SKAT.example)
attach(SKAT.example)
obj<-SKAT_Null_Model(y.c ~ 1, out_type="C")
SKAT(Z, obj)$p.value
library(SKAT)
data(SKAT.example)
attach(SKAT.example)
obj<-SKAT_Null_Model(y.c ~ 1, out_type="C")
SKAT(Z, obj)$p.value
library(SKAT)
# setwd("~/GitHub/SKAT/SKATr/")
# functionFiles <- list.files()
# for (functionN in 1:length(functionFiles)){
#   source(functionFiles[functionN])
# }
# rm(functionFiles)
# rm(functionN)
data(SKAT.example)
attach(SKAT.example)
obj<-SKAT_Null_Model(y.c ~ 1, out_type="C")
SKAT(Z, obj)$p.value
library(SKAT)
data(SKAT.example)
attach(SKAT.example)
library(SKAT)
# setwd("~/GitHub/SKAT/SKATr/")
# functionFiles <- list.files()
# for (functionN in 1:length(functionFiles)){
#   source(functionFiles[functionN])
# }
# rm(functionFiles)
# rm(functionN)
data(SKAT.example)
#attach(SKAT.example)
obj<-SKAT_Null_Model(y.c ~ 1, out_type="C")
SKAT(Z, obj)$p.value
obj<-SKAT_Null_Model(y.c ~ X, out_type="C")
SKAT(Z, obj)$p.value
setwd("~/GitHub/SKAT/SKATr/")
functionFiles <- list.files()
for (functionN in 1:length(functionFiles)){
source(functionFiles[functionN])
}
rm(functionFiles)
rm(functionN)
data(SKAT.example)
obj<-SKAT_Null_Model(y.c ~ X, out_type="C")
SKAT(Z, obj)$p.value
SKAT(Z, obj)
Z
obj
kernel = "linear.weighted"
method = "davies"
weights.beta = c(1, 25)
weights = NULL
impute.method = "fixed"
r.corr = 0
is_check_genotype = TRUE
is_dosage = FALSE
missing_cutoff = 0.15
kernel
method
re <-
SKAT_With_NullModel(
Z,
obj,
kernel = kernel,
method = method,
weights.beta = weights.beta,
weights = weights,
impute.method = impute.method,
r.corr = r.corr,
is_check_genotype = is_check_genotype,
is_dosage = is_dosage,
missing_cutoff = missing_cutoff
)
re
obj.res$res
n <- dim(Z)[1]
m <- dim(Z)[2]
out.method <- SKAT_Check_Method(method, r.corr)
method = out.method$method
r.corr = out.method$r.corr
out.z <-
SKAT_MAIN_Check_Z(
Z,
n,
obj.res$id_include,
SetID,
weights,
weights.beta,
impute.method,
is_check_genotype,
is_dosage,
missing_cutoff
)
obj.res = obj$res
out.z <-
SKAT_MAIN_Check_Z(
Z,
n,
obj.res$id_include,
SetID,
weights,
weights.beta,
impute.method,
is_check_genotype,
is_dosage,
missing_cutoff
)
obj.res = obj
out.z <-
SKAT_MAIN_Check_Z(
Z,
n,
obj.res$id_include,
SetID,
weights,
weights.beta,
impute.method,
is_check_genotype,
is_dosage,
missing_cutoff
)
out.z
SKAT_Check_RCorr(kernel, r.corr)
kernel
r.corr
weights
weights.beta
View(SKAT_MAIN_Check_Z)
View(SKAT_MAIN_Check_Z)
is_dosage
n
is_check_genotype
is_dosage
!is_check_genotype && !is_dosage
if (!is_check_genotype && !is_dosage) {
Z.test <- Z[id_include, ]
if (!is.matrix(Z.test)) {
Z.test <- as.matrix(Z.test)
}
return(list(
Z.test = Z.test,
weights = weights,
return = 0
))
}
Z.test
Z
!is.matrix(Z.test)
!is.matrix(Z.test)
!is.matrix(Z.test)
!is.matrix(Z.test)
if (class(Z) != "matrix")
stop("Z is not a matrix")
if (nrow(Z) != n)
stop("Dimensions of y and Z do not match")
if (is_dosage == TRUE) {
impute.method = "fixed"
}
if (!is_check_genotype && !is_dosage) {
Z.test <- Z[id_include, ]
if (!is.matrix(Z.test)) {
Z.test <- as.matrix(Z.test)
}
return(list(
Z.test = Z.test,
weights = weights,
return = 0
))
}
Z
IDX_MISS <- union(which(is.na(Z)), which(Z == 9))
IDX_MISS
missing_cutoff
if (length(ID_INCLUDE_SNP) == 0) {
if (is.null(SetID)) {
msg <-
sprintf("ALL SNPs have either high missing rates or no-variation. P-value=1")
} else {
msg <-
sprintf("In %s, ALL SNPs have either high missing rates or no-variation. P-value=1",
SetID)
}
warning(msg, call. = FALSE)
re <-
list(
p.value = 1,
p.value.resampling = NA,
Test.Type = NA,
Q = NA,
param = list(n.marker = 0, n.marker.test = 0),
return = 1
)
} else if (m - length(ID_INCLUDE_SNP) > 0) {
if (is.null(SetID)) {
msg <-
sprintf(
"%d SNPs with either high missing rates or no-variation are excluded!",
m - length(ID_INCLUDE_SNP)
)
} else {
msg <-
sprintf(
"In %s, %d SNPs with either high missing rates or no-variation are excluded!",
SetID,
m - length(ID_INCLUDE_SNP)
)
}
warning(msg, call. = FALSE)
Z <- as.matrix(Z[, ID_INCLUDE_SNP])
}
ID_INCLUDE_SNP <- NULL
for (i in 1:m) {
missing.ratio <- length(which(is.na(Z[, i]))) / n
sd1 <- sd(Z[, i], na.rm = TRUE)
if (missing.ratio < missing_cutoff && sd1 > 0) {
ID_INCLUDE_SNP <- c(ID_INCLUDE_SNP, i)
}
}
if (length(ID_INCLUDE_SNP) == 0) {
if (is.null(SetID)) {
msg <-
sprintf("ALL SNPs have either high missing rates or no-variation. P-value=1")
} else {
msg <-
sprintf("In %s, ALL SNPs have either high missing rates or no-variation. P-value=1",
SetID)
}
warning(msg, call. = FALSE)
re <-
list(
p.value = 1,
p.value.resampling = NA,
Test.Type = NA,
Q = NA,
param = list(n.marker = 0, n.marker.test = 0),
return = 1
)
} else if (m - length(ID_INCLUDE_SNP) > 0) {
if (is.null(SetID)) {
msg <-
sprintf(
"%d SNPs with either high missing rates or no-variation are excluded!",
m - length(ID_INCLUDE_SNP)
)
} else {
msg <-
sprintf(
"In %s, %d SNPs with either high missing rates or no-variation are excluded!",
SetID,
m - length(ID_INCLUDE_SNP)
)
}
warning(msg, call. = FALSE)
Z <- as.matrix(Z[, ID_INCLUDE_SNP])
}
MAF <- colMeans(Z, na.rm = TRUE) / 2
MAF1 <- colMeans(as.matrix(Z[id_include, ]), na.rm = TRUE) / 2
IDX.Err <- which(MAF > 0.5)
if (length(IDX.Err) > 0) {
#msg<-sprintf("Genotypes of some variants are not the number of minor allele! It is fixed!")
msg <-
sprintf("Genotypes of some variants are not the number of minor alleles!")
warning(msg, call. = FALSE)
# Fixed by SLEE
#Z[,IDX.Err]<-2 - Z[,IDX.Err]
#MAF[IDX.Err]<-1- MAF[IDX.Err]
}
if (length(which(MAF1 > 0)) == 0) {
if (is.null(SetID)) {
msg <- sprintf("No polymorphic SNP. P-value = 1")
} else {
msg <- sprintf("In %s, No polymorphic SNP. P-value = 1", SetID)
}
warning(msg, call. = FALSE)
re <-
list(
p.value = 1,
p.value.resampling = NA,
Test.Type = NA,
Q = NA,
param = list(n.marker = 0, n.marker.test = 0),
return = 1
)
return(re)
}
id_include <- obj$id_include
MAF <- colMeans(Z, na.rm = TRUE) / 2
MAF1 <- colMeans(as.matrix(Z[id_include, ]), na.rm = TRUE) / 2
IDX.Err <- which(MAF > 0.5)
if (length(IDX.Err) > 0) {
#msg<-sprintf("Genotypes of some variants are not the number of minor allele! It is fixed!")
msg <-
sprintf("Genotypes of some variants are not the number of minor alleles!")
warning(msg, call. = FALSE)
# Fixed by SLEE
#Z[,IDX.Err]<-2 - Z[,IDX.Err]
#MAF[IDX.Err]<-1- MAF[IDX.Err]
}
if (length(which(MAF1 > 0)) == 0) {
if (is.null(SetID)) {
msg <- sprintf("No polymorphic SNP. P-value = 1")
} else {
msg <- sprintf("In %s, No polymorphic SNP. P-value = 1", SetID)
}
warning(msg, call. = FALSE)
re <-
list(
p.value = 1,
p.value.resampling = NA,
Test.Type = NA,
Q = NA,
param = list(n.marker = 0, n.marker.test = 0),
return = 1
)
return(re)
}
if (length(IDX_MISS) > 0) {
if (is.null(SetID)) {
msg <-
sprintf("The missing genotype rate is %f. Imputation is applied.",
(length(IDX_MISS)) / length(Z))
} else {
msg <-
sprintf(
"In %s, the missing genotype rate is %f. Imputation is applied.",
SetID,
(length(IDX_MISS)) / length(Z)
)
}
warning(msg, call. = FALSE)
Z <- Impute(Z, impute.method)
}
if (is.null(weights)) {
weights <- Beta.Weights(MAF, weights.beta)
}
Z
length(IDX_MISS) > 0
View(Beta.Weights)
View(Beta.Weights)
n<-length(MAF)
n
IDX_0<-which(MAF == 0)
IDX_0
length(IDX_0)
dbeta
?dbeta
weights.beta[2]
,weights.beta[1]
weights.beta
dbeta(MAF,weights.beta[1],weights.beta[2])
weights <- Beta.Weights(MAF, weights.beta)
weights
Z.test <- Z[id_include, ]
Z.test == Z
all(Z.test == Z)
res
n<-nrow(Z)
t(Z)
Z = t(t(Z) * (weights))
Z
colMeans(t(t(Z) * (weights)))
weights
View(Z)
View(Z)
Z
r.corr
Q.Temp = t(res)%*%Z
res <- obj$res
Q.Temp = t(res)%*%Z
Q.Temp
t(res)
obj.res
obj.res$res
res <- obj.res$res
t(res)%*%Z
t(res)
res
res[2000]
t(res)%*%Z
Q.Temp %*% t(Q.Temp)/s2/2
s2 <- obj$s2
Q.Temp %*% t(Q.Temp)/s2/2
obj<-SKAT_Null_Model(y.c ~ X, out_type="C")
SKAT(Z, obj)$p.value
SKAT(Z, obj)
SKAT(Z, obj,kernel = "linear.we")
SKAT(Z, obj)
View(SKAT)
View(SKAT)
obj<-SKAT_Null_Model(y.c ~ X, out_type="C")
SKAT(Z, obj)$p.value
library(SKAT)
setwd("~/GitHub/SKAT/SKATr/")
functionFiles <- list.files()
for (functionN in 1:length(functionFiles)){
source(functionFiles[functionN])
}
rm(functionFiles)
rm(functionN)
data(SKAT.example)
#attach(SKAT.example)
obj<-SKAT_Null_Model(y.c ~ X, out_type="C")
SKAT(Z, obj)$p.value
SKAT()
SKAT(Z, obj)
(y.c ~ X
library(SKAT)
library(SKAT)
data(SKAT.example)
obj<-SKAT_Null_Model(y.c ~ X, out_type="C")
SKAT(Z, obj)$p.value
attach(SKAT.example)
obj<-SKAT_Null_Model(y.c ~ X, out_type="C")
SKAT(Z, obj)$p.value
library(SKAT)
# setwd("~/GitHub/SKAT/SKATr/")
# functionFiles <- list.files()
# for (functionN in 1:length(functionFiles)){
#   source(functionFiles[functionN])
# }
# rm(functionFiles)
# rm(functionN)
data(SKAT.example)
attach(SKAT.example)
obj<-SKAT_Null_Model(y.c ~ X, out_type="C")
SKAT(Z, obj)$p.value
